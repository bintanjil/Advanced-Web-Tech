import { Repository } from 'typeorm';
import { Seller } from './seller.entity';
import { AddSellerDto } from './add-seller.dto';
import { UpdateSellerDto } from './update-seller.dto';
import { AdminService } from 'src/admin/admin.service';
import { MailService } from 'src/mail/mail.service';
import { Product } from '../product/product.entity';
import { Order } from '../order/order.entity';
export declare class SellerService {
    private readonly sellerRepository;
    private readonly productRepository;
    private readonly orderRepository;
    private adminService;
    private mailService;
    private readonly salt;
    private readonly logger;
    constructor(sellerRepository: Repository<Seller>, productRepository: Repository<Product>, orderRepository: Repository<Order>, adminService: AdminService, mailService: MailService);
    createSeller(addSellerDto: AddSellerDto, adminId: number): Promise<Seller>;
    changeSellerStatus(id: number, status: 'active' | 'inactive', adminId: number): Promise<Seller>;
    findAll(): Promise<Seller[]>;
    getSellerById(id: number): Promise<Seller>;
    updateSeller(id: number, updateSellerdto: UpdateSellerDto, adminId: number): Promise<Seller>;
    updateOwnSeller(selfId: number, dto: UpdateSellerDto): Promise<Seller>;
    deleteSeller(id: number, adminId: number): Promise<void>;
    getSellersByAdmin(adminId: number): Promise<Seller[]>;
    getActiveSellers(): Promise<Seller[]>;
    findByEmail(email: string): Promise<Pick<Seller, 'id' | 'email' | 'password'> | null>;
    searchSeller(q: string): Promise<Seller[]>;
    getInactiveSellers(): Promise<Seller[]>;
    getSellerProducts(sellerId: number): Promise<Product[]>;
    getSellerOrders(sellerId: number): Promise<Order[]>;
}
